



	~~ OBJETOS ~~
	
	- Boat:
		Represents the conveyance the player controls. It may have some attributes such as speed, direction, position, moving methods, acceleration, deceleration,
		brake, etc.
	- Rivals:
		Represents the environment where the race takes place. It may contain information about the present obstacles, such as logs and ducks position
	- Obstacle (tree logs, ducks, etc):
		Base class for the river obstacles. It may contain subclasses like "Log" and "Duck", each of them with specific attributes as position, speed, size, etc.
	- Log:
		Represents a floating log. It may have its own attributes such as position, speed of movement, size and moving methods (maybe following the river course)
	- Duck:
		Represents a duck getting in the player's way along the river. Similar to log, it may have position, speed, size and moving methods attributes
	- Player:
		Represents the player who interacts with the game thanks to the keyboard. It may have some attributes like name, score and boat-control methods
	- Rivals:
		This class represents the AI-controlled rival boats. The should have pretty similar to the player's ones, like speed, direction, position,
		and methods to compete and dodge (avoid) obstacles
	- Finish Line:
		An Object that represents the race final location. It may have attributes like position and methods to verify if a boat have reached and
		completely crossed it.
		



------------------------------------------------------------------------------------------------------------------------------------------------------------
	17/04/2024
	
	BRAINSTORM (brief description of each class)

	Game: Principal class that controls the game flow
	Player: Represents the boat and its owner (player)
	Boat: Class that models the characteristics and behaviours of the player's boat
	AIBoat: Class that represents the AI-controlled boats
	River: Represents the river and its features and properties (river flow, obstacles, etc.).
	Obstacle: Base class for all the game obstacles
		Duck: Subclass that represents ducks as obstacles.
		Log: Subclass that represents logs as obstacles.
		More obstacles if necessary...
	FinishLine: Represents the finish line (where the race ends).
	CollisionDetector: A class that handles the objects collisions in the game
	Scoreboard: Class that saves and show the player overall score.
	
	The relation between classes could be:

	Player tiene un Boat.
	Game contiene múltiples instancias de Player, AIBoat, River, Obstacle, FinishLine y CollisionDetector.
	CollisionDetector verifica las colisiones entre Boat/AIBoat y Obstacle/FinishLine.
	Scoreboard está relacionado con Game para registrar y mostrar los puntajes.



---------------------------------------------------------------------------------------------------------------------------------------------------------

	Some suggests from Angel Escaño
	
	Apart from that features, we need to take care about every screen that we are going to load, cause we are gonna have a initial log screen, the game one, the menu, the end of the game as well and the minigame.
	We need to control all areas of the game and that is gonna take much more classes than the casual object ones, well need as well events controllers who are gonna be the ones that detects the collisions with objects
	and I think that it would be interesting to have the events all saved in another java class. Well need several classes to make sure everything is well structured and readable for everyone.
	
	The main classes should be:
		Class boat and class obstacle
		Class initgame and class event handlers
		Class for the control of the game (movement and key detectors and stuff)
		Class for the visual interfaces we are gonna handle
		Class for the minigame
		Class for the AI of the boats
		Class that depends on the boat which is gonna be the different types of boats we are gonna have

